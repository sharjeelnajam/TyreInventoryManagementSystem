@page "/tenants"
@using Domain
@using Infrastructure.Services
@inject ITenantService TenantService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Tenants</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3 class="fw-bold">
            <i class="bi bi-building me-2"></i> Tenant Management
        </h3>
        <button class="btn btn-primary" @onclick="AddTenant">
            <i class="bi bi-plus-circle me-1"></i> Add
        </button>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status"></div>
            <p class="mt-2">Loading tenants...</p>
        </div>
    }
    else if (tenants is null || !tenants.Any())
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle me-2"></i> No tenants found. Click <b>Add Tenant</b> to create one.
        </div>
    }
    else
    {
        <div class="table-responsive shadow-sm rounded">
            <table class="table table-striped table-hover align-middle">
                <thead class="table-primary">
                    <tr>
                        <th>Name</th>
                        <th>Domain</th>
                        <th>Email</th>
                        <th>Phone</th>
                        <th>City</th>
                        <th>Created At</th>
                        <th style="width: 150px;">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var tenant in tenants)
                    {
                        <tr>
                            <td>@tenant.Name</td>
                            <td>@tenant.Domain</td>
                            <td>@tenant.Email</td>
                            <td>@tenant.PhoneNumber</td>
                            <td>@tenant.City</td>
                            <td>@tenant.CreatedAt.ToString("yyyy-MM-dd")</td>
                            <td>
                                <i class="bi bi-pencil-square text-primary fs-5 me-3 cursor-pointer"
                                   title="Edit Tenant"
                                   @onclick="() => EditTenant(tenant.Id)">
                                </i>
                                <i class="bi bi-trash text-danger fs-5 cursor-pointer"
                                   title="Delete Tenant"
                                   @onclick="() => DeleteTenant(tenant.Id)">
                                </i>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<Tenant> tenants = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadTenants();
    }

    private async Task LoadTenants()
    {
        isLoading = true;
        tenants = await TenantService.GetTenantsAsync();
        isLoading = false;
    }

    private void AddTenant()
    {
        Navigation.NavigateTo("/tenants/addedit");
    }

    private void EditTenant(Guid id)
    {
        Navigation.NavigateTo($"/tenants/addedit/{id}");
    }

    private async Task DeleteTenant(Guid id)
    {
        if (await JsConfirm("Are you sure you want to delete this tenant?"))
        {
            // Assuming you have DeleteTenantAsync in your service
            await TenantService.DeleteTenantAsync(id);
            await LoadTenants();
        }
    }

    // JS confirmation helper
    private async Task<bool> JsConfirm(string message)
    {
        return await JS.InvokeAsync<bool>("confirm", message);
    }

    [Inject] private IJSRuntime JS { get; set; }
}
