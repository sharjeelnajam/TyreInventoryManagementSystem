@page "/tenants/addedit/{Id:guid?}"
@using Domain
@using Infrastructure.Services
@inject ITenantService TenantService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>@(IsEditMode ? "Edit Tenant" : "Add Tenant")</PageTitle>

<h3 class="mb-3">@(IsEditMode ? "Edit Tenant" : "Add Tenant")</h3>

<EditForm Model="@tenant" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="card shadow p-4">
        <div class="row">

            <!-- ✅ Name -->
            <div class="col-md-6 mb-3">
                <label>Name</label>
                <InputText @bind-Value="tenant.Name" class="form-control" />
                <ValidationMessage For="@(() => tenant.Name)" class="text-danger small" />
            </div>

            <!-- ✅ Domain -->
            <div class="col-md-6 mb-3">
                <label>Domain</label>
                <InputText @bind-Value="tenant.Domain" class="form-control" />
                <ValidationMessage For="@(() => tenant.Domain)" class="text-danger small" />
            </div>

            <!-- ✅ Email -->
            <div class="col-md-6 mb-3">
                <label>Email</label>
                <InputText @bind-Value="tenant.Email" class="form-control" />
                <ValidationMessage For="@(() => tenant.Email)" class="text-danger small" />
            </div>

            <!-- ✅ Phone -->
            <div class="col-md-6 mb-3">
                <label>Phone</label>
                <InputText @bind-Value="tenant.PhoneNumber" class="form-control" />
                <ValidationMessage For="@(() => tenant.PhoneNumber)" class="text-danger small" />
            </div>

            <!-- ✅ City -->
            <div class="col-md-6 mb-3">
                <label>City</label>
                <InputText @bind-Value="tenant.City" class="form-control" />
                <ValidationMessage For="@(() => tenant.City)" class="text-danger small" />
            </div>

            <!-- ✅ Address -->
            <div class="col-md-6 mb-3">
                <label>Address</label>
                <InputTextArea @bind-Value="tenant.Address" class="form-control" />
                <ValidationMessage For="@(() => tenant.Address)" class="text-danger small" />
            </div>
        </div>

        <!-- ✅ Buttons -->
        <div class="d-flex justify-content-end mt-3">
            <button type="submit" class="btn btn-success me-2">💾 Save</button>
            <button type="button" class="btn btn-secondary" @onclick="Cancel">⬅ Back</button>
        </div>
    </div>
</EditForm>


@code {
    [Parameter] public Guid? Id { get; set; }
    private Tenant tenant = new();
    private bool IsEditMode => Id.HasValue;

    protected override async Task OnInitializedAsync()
    {
        if (IsEditMode && Id.HasValue)
        {
            tenant = await TenantService.GetTenantByIdAsync(Id.Value) ?? new Tenant();
        }
    }

    private async Task HandleValidSubmit()
    {
        if (IsEditMode)
        {
            await TenantService.UpdateTenantAsync(tenant, null);
        }
        else
        {
            await TenantService.AddTenantAsync(tenant, Guid.Empty);
        }

        Navigation.NavigateTo("/tenants");
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/tenants");
    }
}
